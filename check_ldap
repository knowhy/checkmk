#!/usr/bin/env python
#
# simple check_MK local plugin to grab performance data from openldap server
#
# author: Henrik Pingel <knowhy@gmail.com>
#
# username need to have access to cn=Monitor
# ldap_url syntax: protocol://hostname:port
#
# this check returns always OK
#

import ldap
import sys

username = "cn=Manager,dc=example,dc=com"
password = "PASSWORD"
ldap_url = "ldap://HOST:PORT"

status = "0"

STATS = {
    'conns.total': {
        'base': 'cn=Total,cn=Connections,cn=Monitor',
        'attr': 'monitorCounter'},
    'conns.current': {
        'base': 'cn=Current,cn=Connections,cn=Monitor',
        'attr': 'monitorCounter'},
    'ops.total': {
        'base': 'cn=Operations,cn=Monitor',
        'attr': 'monitorOpCompleted'},
    'ops.total_initiated': {
        'base': 'cn=Operations,cn=Monitor',
        'attr': 'monitorOpInitiated'},
    'ops.bind': {
        'base': 'cn=Bind,cn=Operations,cn=Monitor',
        'attr': 'monitorOpCompleted'},
    'ops.unbind': {
        'base': 'cn=Unbind,cn=Operations,cn=Monitor',
        'attr': 'monitorOpCompleted'},
    'ops.delete': {
        'base': 'cn=Delete,cn=Operations,cn=Monitor',
        'attr': 'monitorOpCompleted'},
    'ops.modify': {
        'base': 'cn=Modify,cn=Operations,cn=Monitor',
        'attr': 'monitorOpCompleted'},
    'ops.modrdn': {
        'base': 'cn=Modrdn,cn=Operations,cn=Monitor',
        'attr': 'monitorOpCompleted'},
    'ops.compare': {
        'base': 'cn=Compare,cn=Operations,cn=Monitor',
        'attr': 'monitorOpCompleted'},
    'ops.search': {
        'base': 'cn=Search,cn=Operations,cn=Monitor',
        'attr': 'monitorOpCompleted'},
    'ops.extended': {
        'base': 'cn=Extended,cn=Operations,cn=Monitor',
        'attr': 'monitorOpCompleted'},
    'ops.abandon': {
        'base': 'cn=Abandon,cn=Operations,cn=Monitor',
        'attr': 'monitorOpCompleted'},
    'waiter.read': {
        'base': 'cn=Read,cn=Waiters,cn=Monitor',
        'attr': 'monitorCounter'},
    'waiter.write': {
        'base': 'cn=Write,cn=Waiters,cn=Monitor',
        'attr': 'monitorCounter'},
    'stats.bytes': {
        'base': 'cn=Bytes,cn=Statistics,cn=Monitor',
        'attr': 'monitorCounter'},
    'stats.pdu': {
        'base': 'cn=PDU,cn=Statistics,cn=Monitor',
        'attr': 'monitorCounter'},
    'stats.referrals': {
        'base': 'cn=Referrals,cn=Statistics,cn=Monitor',
        'attr': 'monitorCounter'},
    'stats.entries': {
        'base': 'cn=Entries,cn=Statistics,cn=Monitor',
        'attr': 'monitorCounter'},
    'threads.open': {
        'base': 'cn=Open,cn=Threads,cn=Monitor',
        'attr': 'monitoredInfo'},
    'threads.starting': {
        'base': 'cn=Starting,cn=Threads,cn=Monitor',
        'attr': 'monitoredInfo'},
    'threads.active': {
        'base': 'cn=Active,cn=Threads,cn=Monitor',
        'attr': 'monitoredInfo'},
    'threads.max': {
        'base': 'cn=Max,cn=Threads,cn=Monitor',
        'attr': 'monitoredInfo'},
    'threads.max_pending': {
        'base': 'cn=Max Pending,cn=Threads,cn=Monitor',
        'attr': 'monitoredInfo'},
    'threads.pending': {
        'base': 'cn=Pending,cn=Threads,cn=Monitor',
        'attr': 'monitoredInfo'},
    'threads.backload': {
        'base': 'cn=Backload,cn=Threads,cn=Monitor',
        'attr': 'monitoredInfo'},
    }


def dumpclean(obj):
    if type(obj) == dict:
        for k, v in obj.items():
            if hasattr(v, '__iter__'):
                print k
                dumpclean(v)
            else:
                print(status + " " + "LDAP_" + k  + " " + '%s=%s' % (k, v) + " " + '%s=%s' % (k, v))
#               print "%s=%s" % (k,v)
    elif type(obj) == list:
        for v in obj:
            if hasattr(v, '__iter__'):
                dumpclean(v)
            else:
                print v
    else:
        print obj


def get_datapoints(ldap_url, username, password):
    datapoints = {}

    conn = ldap.initialize(ldap_url)
#    conn.start_tls_s()
    conn.simple_bind_s(username, password)

    for key in STATS.keys():
        base = STATS[key]['base']
        attr = STATS[key]['attr']
        num = conn.search(base, ldap.SCOPE_BASE,
                           'objectClass=*', [attr])
        result_type, result_data = conn.result(num, 0)
        datapoints[key] = int(result_data[0][1][attr][0])

    dumpclean(datapoints)

get_datapoints(ldap_url, username, password)
